Концепции Kubernetes

- Nodes (node.md): Нода это машина в кластере Kubernetes.

- Pods (pods.md): Pod это группа контейнеров с общими разделами, запускаемых как единое целое.

- Replication Controllers (replication-controller.md): replication controller гарантирует, что определенное количество «реплик» pod'ы будут запущены в любой момент времени.

- Services (services.md): Сервис в Kubernetes это абстракция которая определяет логический объединённый набор pod и политику доступа к ним.

- Volumes (volumes.md): Volume(раздел) это директория, возможно, с данными в ней, которая доступна в контейнере.

- Labels (labels.md): Label'ы это пары ключ/значение которые прикрепляются к объектам, например pod'ам. Label'ы могут быть использованы для создания и выбора наборов объектов.

- Kubectl Command Line Interface (kubectl.md): kubectl интерфейс командной строки для управления Kubernetes.


Architecture

- Worker nodes
    - Kubelet

    Kubelet управляет pod'ами их контейнерами, образами, разделами, etc.

    - Kube-Proxy

    Также на каждой ноде запускается простой proxy-балансировщик. Этот сервис запускается на каждой ноде
    и настраивается в Kubernetes API. Kube-Proxy может выполнять простейшее перенаправление потоков TCP и UDP 
    (round robin) между набором бэкендов.

    - Container Runtime 

    Это программное обеспечение, которое обеспечивает выполнение контейнеров, осуществляет их изоляцию, управляет
    жизненным циклом контейнеров и предоставляет API для взаимодействия с контейнерами.

- Master node

    - Kubernetes API Server

    Kubernetes API обеспечивает работу api-сервера. Он предназначен для того, чтобы быть CRUD сервером со встроенной 
    бизнес-логикой, реализованной в отдельных компонентах или в плагинах. Он, в основном, обрабатывает REST операции, 
    проверяя их и обновляя соответствующие объекты в etcd (и событийно в других хранилищах).

    - etcd

    Состояние мастера хранится в экземпляре etcd. Это обеспечивает надёжное хранение конфигурационных данных
    и своевременное оповещение прочих компонентов об изменении состояния.

    - Scheduler

    Scheduler привязывает незапущенные pod'ы к нодам через вызов /binding API. Scheduler подключаем; планируется 
    поддержка множественных scheduler'ов и пользовательских scheduler'ов.

    - Controller Manager

    Логически каждый контроллер представляет собой отдельный процесс, но для уменьшения сложности все они компилируются
    в один двоичный файл и выполняются в одном процессе.

    Существует много разных типов контроллеров. Некоторые примеры из них:

    Node controller: отвечает за обнаружение и реагирование при выходе узлов из строя.
    Job controller: отслеживает объекты заданий, которые представляют собой одноразовые задачи, 
    а затем создает модули для выполнения этих задач до завершения.
    EndpointSlice controller: заполняет объекты EndpointSlice (чтобы обеспечить связь между службами и модулями).
    ServiceAccount controller: создайте учетные записи ServiceAccount по умолчанию для новых пространств имен.
    Вышеуказанное не является исчерпывающим списком.
    Replication Controller: отвечает за обеспечение желаемого количества экземпляров (реплик) приложения или сервиса в кластере Kubernetes

    - Cloud Controller Manager 

    Cloud Controller Manager является дополнительным компонентом, который интегрирует Kubernetes 
    с конкретными облачными провайдерами. Он обеспечивает взаимодействие Kubernetes с функциями и сервисами, предоставляемыми 
    облачным провайдером, такими как управление нагрузками, сетевыми ресурсами, хранилищем и т. д.